// why maven project 
* maven is a powerful project management tool that is based on POM (Project Object Model).
* is we not create a maven project then we have to add jar file manually and no need to downaload it . secondaly we have to create jar and war file to deploy . maven project can create automatically 
// problem without maven -> creating the right project structure .->adding set of jars in each project.->building and deploying the project.
// what maven provides. builds, documentation , dependencies,releases,



// hibernate : hibernate is a java framework that simplifies the development of java application to interact with the data base .
            // When we are in JDBC then SQL Query is written by us , this problem can semplify from the hebernate.
            //hibernate is ORM(object relational mapping ) tool : this means that the object of java class is mapped with 
               the table of the database
            //  hibernate is an open source(free), lightweight (based on -pjos(plane java objects) simple-simple java classes))
            // hibernate is non-invasive framework or lossely coupled, means it won't forces the programmers to extend/implement 
               any class/interface
            // it is invented by Gavin King in 2001.
            // Any type of application can build with hibernate framework use in build persistance logic(Spring-web ,swing application 
             ,fx application,java web,spring boot application).
    



// 
//  Traditional way to Save the Data(JDBC): in this we write the sql query manually to store 

//  when we want to store the data to database then only one task we have to do ,bring that object class to  hiberate then maaping is 
   done ,just you need to specify the rows and columns and which class is mapped with which table you have to map. 
 // to create the hibernate project you just need to follow the serveral steps 
    
     // create a maven project then click on next then select the catalog(internal) - filters-(quick start)
 
      // add hibernate core relocation and mysql connector j  depedency in pom.xml file 	
       // create a xml file name (hibernate.cfg.xml)just a stanadad name we hava to follow in src/java

       // for first time there is error in eclipes external file downlad go on window then go on prefernce then go on maven and tick the 
            check box  of downlad repo and java doc artifact
  
//


// how to create a hibernate project 
-> to create a hibernate project firstly we have to create a mavan project then catalog internal  the filter is quick start 	
hiberante conf 

<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration SYSTEM 
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
		<property name="connection.url">jdbc:mysql://localhost:3306/myhibernate</property>
		<property name="connection.username">root</property>
		<property name="connection.password">Abhi@321</property>
		<property name="dialect">org.hibernate.dialect.MySQL5Dialect</property>
		<property name="hbm2ddl.auto">update</property>
		<property name="show_sql">true</property>
		<!-- for the  mapping with annation -->
		<mapping class="com.HibernateLearn.HibernateLearn.Student" />
   	<!-- for the  mapping with  xml files -->
<!-- <mapping  resource="mappingFileName"    /> --> 
	</session-factory>
</hibernate-configuration>

// @Entity :- it means that we have to create table of that classs
// @Transient :- it means that tell the column that not create the particular columns
// @Temporal  :- over a date fields tell the habirnate the format in which the data needs to be saved.
// @Lob  :        tell the hibernate that this is a large object , not a simple object
// @OneToOne , @OneToMany , @ManyToOne,@JoinColumn etc	 



fetch the data in hibernate 

get  and load

get() : get method is call then its return the null value if the data is not present in the database and load method return exception

get ():get method is call then the value of all the data base at id call the data come and store in the program  and in load it comes on the time of actual call the data or use of it .




//Fetch type in hibernate 

EAGER : It is a design pattern in which loading occurs on the spot.
	

LAZY : In Lazy loading ,associated data loads only when we explicity call getter or size method .


//Hibernate/Persistence lifecycle states
Transient State  : when we create a new  object and set its property then it goes to transient value
Persistent State : session .save then it come in Persistece State and data goes to database in the state then the value can change Session object hold the data
Detached State  : session.close then it comes to detached state . Any change in the values of the object could'nt reflect into the data base.
                   Session object could'nt hold the data
Removed State   :  session.delete function remove data from the database
 

// HQL (Hibernate Query Language )
by get method we only get those row data which we know the id of the row
how to load complex data just like you have to match the username column and as well as password field .this can be store in multiple data in the database 

hql : database independent , easy to learn for programmer 
sql : database dependent , esay to learn for DBA(DataBase Adminstrator ) 

String quer ="from student  ";

String quer ="from student where city= 'lucknow '";
String quer ="from student where city=: x";
String quer ="from student where city=: x";
q.setParameter("x","LUCKNOW");
String q="from student as s where s.city =:x and s.name=:n";
q.setPatamerter("x","lucknow");
q.setPatamerter("n","peter");
Query q=s.createQuery(Query);
// single result 

// mutiple result 
List<Student> list =q.list();
for(Student std:list){
sop(std.getName());
}

// delte hql query
s.createQuery("delte from student  ");

s.createQuery("delte from student where city='lucknow'");
s.createQuery("delte from student s where city='lucknow'");
Query q2=s.createQuery("delte from student as  s where s.city=:c");
q2.executeUpdate();

// update hql wuery
Transaction tx=s.openSession();
Query q2=s.createQuery("update student set ciy=:c where name =:n");
q2.setParameter("c","delhi");
q2.setParameter("n","peter");
tx.commit();

// join hql

s.createQuery("select q.question , q.questionId,a.answerId from Question q as q INNER JOIN q.answers as a ");

// pagination is process by we can deside how much we need data at a time 
session s=factory.openSession();
Query query=s.createQuery("from student");
query.setFirstResult(0);
query.setMaxResults(5);

List<student> list=query.list();
for(student st:list){
sop(st.getName());
}


// sql query in hibernate 
String q="select * from student ";
NativeQuery nq=s.createSQLQuery(q);// it will resutn the native query object// contrl 1 // NativeQuery nq=
List<Object[]> list=nq.list();
for(object[] st: list ){
sop(Arrays.deepToString(student	));	
}

// cascading 
 it use for save all the related entity save autimatically in the table and also delte the entity from the table (cascade=cascadeTypes.ALL)

// caching 
Caching is a mechanism to enhance the performance of the applicationas